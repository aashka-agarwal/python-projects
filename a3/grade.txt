Grade: 30.00/50.00

5 Deduction(s):

--------------
#1: 4.00 points
Failing test: test_cosine_sim_1: 
        @points=4
        
Traceback (most recent call last):
  File "../assignments-sol/a3/a3_test.py", line 71, in test_cosine_sim_1
    0.37)
AssertionError: 28.140000000000001 != 0.37

source:
    def test_cosine_sim_1(self):
         """
         @points=4
         """
         self.assertEqual(round(cosine_sim(csr_matrix([1,2,3]), csr_matrix([4,-5,6])), 2),
                          0.37)
--------------

--------------
#2: 5.00 points
Failing test: test_cosine_sim_2: 
        @points=5
        
Traceback (most recent call last):
  File "../assignments-sol/a3/a3_test.py", line 78, in test_cosine_sim_2
    -0.31)
AssertionError: -23.550000000000001 != -0.31

source:
    def test_cosine_sim_2(self):
         """
         @points=5
         """
         self.assertEqual(round(cosine_sim(csr_matrix([1,2,0]), csr_matrix([4,-5,6])), 2),
                          -0.31)
--------------

--------------
#3: 4.00 points
Failing test: test_predict_2: 
        @points=4
        
Traceback (most recent call last):
  File "../assignments-sol/a3/a3_test.py", line 132, in test_predict_2
    self.assertEqual(round(make_predictions(movies, ratings_train, ratings_test)[0], 1), 2.6)
AssertionError: 2.5 != 2.6

source:
    def test_predict_2(self):
         """
         @points=4
         """
         movies = pd.DataFrame([[123, 'horror|horror|romance|romance|romance', ['horror', 'horror', 'romance', 'romance', 'romance']],
                                [456, 'comedy|horror', ['comedy', 'horror']],
                                [789, 'horror', ['horror']],
                                [000, 'action', ['action']]],
                               columns=['movieId', 'genres', 'tokens'])
         movies, vocab = featurize(movies)
         ratings_train = pd.DataFrame([
                 [9, 123, 2.5, 1260759144],
                 [9, 456, 3.5, 1260759144],
                 [9, 789, 1, 1260759144],
                 [8, 123, 4.5, 1260759144],
                 [8, 456, 4, 1260759144],
                 [8, 789, 5, 1260759144],
                 [7, 123, 2, 1260759144],
                 [7, 456, 3, 1260759144]],
                                      columns=['userId', 'movieId', 'rating', 'timestamp'])
         ratings_test = pd.DataFrame([
                 [7, 789, 4, 1260759144]],
                                     columns=['userId', 'movieId', 'rating', 'timestamp'])
 
         self.assertEqual(round(make_predictions(movies, ratings_train, ratings_test)[0], 1), 2.6)
--------------

--------------
#4: 4.00 points
Failing test: test_vectorize_2: 
        @points=4
        
Traceback (most recent call last):
  File "../assignments-sol/a3/a3_test.py", line 50, in test_vectorize_2
    0.20)
AssertionError: 0.0 != 0.2

source:
    def test_vectorize_2(self):
         """
         @points=4
         """
         movies = pd.DataFrame([[123, 'horror|horror|romance|romance|romance',
                                 ['horror', 'horror', 'romance', 'romance', 'romance']],
                                [456, 'romance', ['romance']]], columns=['movieId', 'genres', 'tokens'])
         movies, vocab = featurize(movies)
         row0 = movies['features'].tolist()[0]
         self.assertEqual(round(max(list(row0.data)), 2),
                             0.20)
         self.assertEqual(round(min(list(row0.data)), 1),
                             0.0)
--------------

--------------
#5: 3.00 points
Failing test: test_vectorize_3: 
        @points=3
        
Traceback (most recent call last):
  File "../assignments-sol/a3/a3_test.py", line 64, in test_vectorize_3
    0.0)
AssertionError: -0.29999999999999999 != 0.0

source:
    def test_vectorize_3(self):
         """
         @points=3
         """
         movies = pd.DataFrame([[123, 'horror|horror|romance|romance|romance',
                                 ['horror', 'horror', 'romance', 'romance', 'romance']],
                                [456, 'romance', ['romance']]], columns=['movieId', 'genres', 'tokens'])
         movies, vocab = featurize(movies)
         row1 = movies['features'].tolist()[1]
         self.assertEqual(round(max(list(row1.data)), 1),
                          0.0)
--------------

